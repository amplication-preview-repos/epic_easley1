/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ReviewReply as PrismaReviewReply } from "@prisma/client";

export class ReviewReplyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReviewReplyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.reviewReply.count(args);
  }

  async reviewReplies(
    args: Prisma.ReviewReplyFindManyArgs
  ): Promise<PrismaReviewReply[]> {
    return this.prisma.reviewReply.findMany(args);
  }
  async reviewReply(
    args: Prisma.ReviewReplyFindUniqueArgs
  ): Promise<PrismaReviewReply | null> {
    return this.prisma.reviewReply.findUnique(args);
  }
  async createReviewReply(
    args: Prisma.ReviewReplyCreateArgs
  ): Promise<PrismaReviewReply> {
    return this.prisma.reviewReply.create(args);
  }
  async updateReviewReply(
    args: Prisma.ReviewReplyUpdateArgs
  ): Promise<PrismaReviewReply> {
    return this.prisma.reviewReply.update(args);
  }
  async deleteReviewReply(
    args: Prisma.ReviewReplyDeleteArgs
  ): Promise<PrismaReviewReply> {
    return this.prisma.reviewReply.delete(args);
  }
}
